#!/usr/bin/env ruby

require 'csv'
require 'json'
require 'cgi'
require 'base64'
require 'shellwords'
require 'optparse'
require 'digest/md5'

options = {
  template_file: nil,
  csv_file: nil,
  exec: nil,
  default_format: 'json'
}

OPTPARSE = OptionParser.new do |opts|
  opts.banner = "Usage: " + File.basename(__FILE__) + "[OPTIONS] [CURL OPTIONS]"

  opts.on('--template FILE', 'Path to the template file') do |v|
    options[:template_file] = v
  end

  opts.on('--csv CSV_FILE', 'Path to the CSV file') do |v|
    options[:csv_file] = v
  end

  opts.on('--exec UTILITY', 'Utility to run on each response') do |v|
    options[:exec] = v
  end
end

CSV_CURL_ARGV = []
ARGV.size.times.to_a.reverse.each do |idx|
  case ARGV[idx]
  when '--template',
       '--csv',
       '--exec'
    CSV_CURL_ARGV << ARGV.delete_at(idx)
    CSV_CURL_ARGV << ARGV.delete_at(idx)
  end
end
OPTPARSE.parse(CSV_CURL_ARGV)

def failed(msg, errno = 1)
  $stderr.puts msg
  if errno == 1
    puts ""
    puts OPTPARSE
  end
  exit errno
end

failed('no csv input file specified') unless options[:csv_file]
failed("csv input file #{options[:csv_file]} not found") unless File.exist?(options[:csv_file])

failed("template file #{options[:template_file]} not found") if options[:template_file] && !File.exist?(options[:template_file])

template = options[:template_file] ? File.read(options[:template_file]) : nil
input = CSV.open(options[:csv_file])
input_headers = input.shift

required_replacements = ARGV.map do |arg|
  arg.scan(/\{\{(.*?)\}\}/)
end

required_replacements += options[:exec].scan(/\{\{(.*?)\}\}/) if options[:exec]
required_replacements += template.scan(/\{\{(.*?)\}\}/) if template
required_replacements.flatten!
required_replacements.map! { |v| v.split(':', 2).last }
required_replacements.uniq!

missing_replacements = required_replacements - input_headers
failed("missing replacement values for #{missing_replacements.join(', ')}", 2) unless missing_replacements.empty?

TMP_REQUEST_BODY_FILE = 'csv-utils.request'

def format_value(value, format)
  return '' unless value

  case format
  when 'json'
    value = value.to_json
    value.sub!(/\A"/, '')
    value.sub!(/"\z/, '')
    value
  when 'query',
       'param'
    CGI.escape(value)
  when 'base64'
    Base64.strict_encode64(value)
  when 'urlsafe64'
    Base64.urlsafe_encode64(value)
  when 'hex'
    value.unpack('H*').first
  when 'shellword',
       'shell'
    Shellword.escape(value)
  else
    value
  end
end

def generate_string(str, data)
  str.gsub(/\{\{(.*?)\}\}/) do
    format, key =
         if $1.include?(':')
           $1.split(':', 2)
         else
           [nil, $1]
         end

    format_value(data[key], format)
  end
end

def run_command_safely(cmd)
  res = `#{cmd}`
  failed("failed to run command: #{cmd}", 2) unless $?.success?
  res
end

def build_curl_command(curl_args, data, request_file, response_file)
  cmd = "curl -s"
  cmd += " -d@#{request_file} " if request_file
  cmd += ' ' + curl_args.map { |arg| Shellwords.escape(generate_string(arg, data)) }.join(' ')
  cmd += " > #{response_file}"
  cmd
end

def build_exec_command(exec, data, response_file)
  cmd = "cat #{response_file} | "
  cmd += generate_string(exec, data)
  cmd
end

while (row = input.shift)
  data = Hash[input_headers.zip(row)]

  request_file =
    if template
      request_body = generate_string(template, data)
      File.open(TMP_REQUEST_BODY_FILE, 'wb') { |f| f.write request_body }
      TMP_REQUEST_BODY_FILE
    else
      nil
    end

  response_file = "csv-utils.response"

  cmd = build_curl_command(ARGV, data, request_file, response_file)
  run_command_safely(cmd)

  output =
    if options[:exec]
      cmd = build_exec_command(options[:exec], data, response_file)
      run_command_safely(cmd)
    else
      File.read(response_file)
    end

  puts output
end
